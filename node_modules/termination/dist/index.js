"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Animation = void 0;

var _events = require("events");

var _EventProxy = _interopRequireDefault(require("./EventProxy"));

var _Render = _interopRequireWildcard(require("./Render"));

var _ObjectsManager = _interopRequireDefault(require("./ObjectsManager"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Animation extends _events.EventEmitter {
  constructor() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();
    this.ObjectsManager = new _ObjectsManager.default();
    this.Render = new _Render.default(this.ObjectsManager, {
      fps: props.fps,
      maxSize: props.maxSize,
      speed: props.speed,
      bg: props.bg
    });
    this.EventProxy = new _EventProxy.default(this, this.Render, (0, _utils.objToArray)(_Render.EVENTS));
  }
  /**
   * External
   */


  config(options) {
    return this.Render.config(options);
  }

  start() {
    this.Render.resume();
  }

  resume() {
    var {
      append
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.Render.resume(append);
    this.ObjectsManager.resume();
  }

  pause() {
    var {
      clear
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.Render.pause(clear);
    this.ObjectsManager.pause();
  }

  pauseAllTransitions() {
    this.ObjectsManager.pauseAllTransitions();
  }

  resumeAllTransitions() {
    this.ObjectsManager.resumeAllTransitions();
  }

  add(props) {
    return this.ObjectsManager.add(props);
  }

  end() {
    var {
      clear
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.EventProxy.end();
    this.Render.end(clear);
    this.ObjectsManager.end();
  }

}

exports.Animation = Animation;