"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uuid = require("uuid");

var _Transition = _interopRequireDefault(require("./Transition"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TransitionManager {
  constructor() {
    _defineProperty(this, "remove", key => () => {
      delete this.transitions[key];
    });

    this.transitions = {};
  }

  callAll(method) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    for (var transitionKey in this.transitions) {
      var TransitionInstance = this.transitions[transitionKey];
      TransitionInstance[method](...args);
    }
  }

  run(key, callBack) {
    return this.checkIfExists(key).run(callBack);
  }

  pause(key) {
    return this.checkIfExists(key).pause();
  }

  resume(key) {
    return this.checkIfExists(key).resume();
  }

  end(key) {
    this.checkIfExists(key).end();
    delete this.transitions[key];
  }

  checkIfExists(key) {
    var TransitionInstance = this.transitions[key];

    if (!TransitionInstance) {
      throw new Error('Transition not found');
    }

    return TransitionInstance;
  }

  /**
   * External
   */
  Transition() {
    var key = (0, _uuid.v4)();

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var TransitionInstance = new _Transition.default(...args, this.remove(key));
    this.transitions[key] = TransitionInstance;
    return TransitionInstance;
  }

  applyAll(timePassed) {
    return this.callAll('apply', timePassed);
  }

  pauseAll(isAuto) {
    return this.callAll('pause', isAuto);
  }

  resumeAll(isAuto) {
    return this.callAll('resume', isAuto);
  }

  endAll() {
    return this.callAll('end');
  }

}

exports.default = TransitionManager;