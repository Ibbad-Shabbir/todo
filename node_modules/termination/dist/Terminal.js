"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EVENTS = void 0;

var _events = require("events");

var EVENTS = {
  RESIZE: 'resize'
};
exports.EVENTS = EVENTS;

class Terminal extends _events.EventEmitter {
  constructor() {
    super();
    this.handleResize = this.handleResize.bind(this);
    this.subscribeListeners();
    this.lastWritten = '';
  }

  subscribeListeners() {
    process.stdout.on('resize', this.handleResize);
  }

  removeListeners() {
    process.stdout.removeListener('resize', this.handleResize);
  }

  handleResize() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.emit(EVENTS.RESIZE, ...args);
  }
  /**
   * External
   */


  clear() {
    var split = this.lastWritten.split('\n');
    var cols = split[0].length;
    var rows = split.length - 1;
    process.stdout.moveCursor(-cols, -rows);
    process.stdout.clearScreenDown();
  }

  write(str) {
    process.stdout.write(str);
    this.lastWritten = str;
  }

  refresh(str) {
    this.clear();
    this.write(str);
  }

  getHeight() {
    return process.stdout.rows;
  }

  getWidth() {
    return process.stdout.columns;
  }

  getSize() {
    return {
      width: process.stdout.columns,
      height: process.stdout.rows
    };
  }

  setCursorVisibility(isVisible) {
    if (isVisible) {
      process.stdout.write('\x1B[?25h');
    } else {
      process.stdout.write('\x1B[?25l');
    }
  }

  end() {
    this.removeListeners();
  }

}

exports.default = Terminal;