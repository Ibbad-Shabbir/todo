"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class _Object {
  constructor(props, onRemove, onTransition) {
    var {
      x = 0,
      y = 0,
      content = '',
      visible = true,
      replaceSpace = false,
      color
    } = props;
    var finalContent = this.fixNewLine(content || '');
    var {
      lines,
      width,
      height
    } = this.getCalculatedContentProps(finalContent);
    this.state = {
      x: x,
      y: y,
      content: finalContent,
      lines: lines,
      width: width,
      height: height,
      color: color,
      replaceSpace: replaceSpace,
      visible: visible
    };
    this.onRemove = onRemove;
    this.onTransition = onTransition;
  }

  setState(data) {
    (0, _utils.merge)(this.state, (0, _utils.definedOnly)(data));
  }

  getCalculatedContentProps(content) {
    var lines = content ? content.split('\n') : [];
    var height = lines.length;
    var width = lines.reduce((max, line) => Math.max(max, line.length), 0);
    return {
      height,
      width,
      lines
    };
  }

  fixNewLine(str) {
    var out = str.replace(/\r\n/g, '\n');
    return out;
  }
  /**
   * External
   */


  update(props) {
    var {
      content = ''
    } = props;
    var {
      content: prevContent
    } = this.state;
    var finalContent = this.fixNewLine(content || prevContent || '');
    var {
      lines,
      width,
      height
    } = this.getCalculatedContentProps(finalContent);
    this.setState(_objectSpread(_objectSpread({}, (0, _utils.definedOnly)(props)), {}, {
      content: finalContent,
      lines: lines,
      width: width,
      height: height
    }));
  }

  remove() {
    return this.onRemove(...arguments);
  }

  transition() {
    return this.onTransition(...arguments);
  }

}

exports.default = _Object;